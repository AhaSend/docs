openapi: 3.1.0
info:
  title: AhaSend API v2
  description: |
    The AhaSend API v2 allows you to send transactional emails, manage domains, webhooks, routes, API keys, and view statistics.

    ## Authentication
    All API requests must be authenticated using a Bearer token in the Authorization header:
    ```
    Authorization: Bearer aha-sk-64-CHARACTER-RANDOM-STRING
    ```

    ## Scopes
    API keys have specific scopes that control access to different resources and actions:

    ### Message Scopes
    - `messages:send:all` - Send messages from any domain in the account
    - `messages:send:{domain}` - Send messages from a specific domain
    - `messages:cancel:all` - Cancel messages from any domain
    - `messages:cancel:{domain}` - Cancel messages from a specific domain
    - `messages:read:all` - Read messages from any domain
    - `messages:read:{domain}` - Read messages from a specific domain

    ### Domain Scopes
    - `domains:read` - Read all domains
    - `domains:write` - Create and update domains
    - `domains:delete:all` - Delete any domain
    - `domains:delete:{domain}` - Delete a specific domain

    ### Account Scopes
    - `accounts:read` - Read account information
    - `accounts:write` - Update account settings
    - `accounts:billing` - Access billing information
    - `accounts:members:read` - Read account members
    - `accounts:members:add` - Add account members
    - `accounts:members:update` - Update account members
    - `accounts:members:remove` - Remove account members

    ### Webhook Scopes
    - `webhooks:read:all` - Read all webhooks
    - `webhooks:read:{domain}` - Read webhooks for a specific domain
    - `webhooks:write:all` - Create and update webhooks
    - `webhooks:write:{domain}` - Create and update webhooks for a specific domain
    - `webhooks:delete:all` - Delete any webhook
    - `webhooks:delete:{domain}` - Delete webhooks for a specific domain

    ### Route Scopes
    - `routes:read:all` - Read all routes
    - `routes:read:{domain}` - Read routes for a specific domain
    - `routes:write:all` - Create and update routes
    - `routes:write:{domain}` - Create and update routes for a specific domain
    - `routes:delete:all` - Delete any route
    - `routes:delete:{domain}` - Delete routes for a specific domain

    ### Suppression Scopes
    - `suppressions:read` - Read suppressions
    - `suppressions:write` - Create suppressions
    - `suppressions:delete` - Delete suppressions
    - `suppressions:wipe` - Delete all suppressions (dangerous)

    ### SMTP Credentials Scopes
    - `smtp-credentials:read:all` - Read all SMTP credentials
    - `smtp-credentials:read:{domain}` - Read SMTP credentials for a specific domain
    - `smtp-credentials:write:all` - Create SMTP credentials
    - `smtp-credentials:write:{domain}` - Create SMTP credentials for a specific domain
    - `smtp-credentials:delete:all` - Delete any SMTP credentials
    - `smtp-credentials:delete:{domain}` - Delete SMTP credentials for a specific domain

    ### Statistics Scopes
    - `statistics-transactional:read:all` - Read all transactional statistics
    - `statistics-transactional:read:{domain}` - Read transactional statistics for a specific domain

    ### API Key Scopes
    - `api-keys:read` - Read API keys
    - `api-keys:write` - Create and update API keys
    - `api-keys:delete` - Delete API keys

    ## Rate Limiting
    - General API endpoints: 100 requests per second, 200 burst
    - Statistics endpoints: 1 request per second, 1 burst

    ## Pagination
    List endpoints use cursor-based pagination with the following parameters:
    - `limit`: Maximum number of items to return (default: 100, max: 100)
    - `cursor`: Pagination cursor for the next page

    ## Time Formats
    All timestamps must be in RFC3339 format, e.g., `2023-12-25T10:30:00Z`

    ## Idempotency
    POST requests support idempotency through the optional `Idempotency-Key` header. When provided:
    - The same request can be safely retried multiple times
    - Duplicate requests return the same response with `Idempotent-Replayed: true`
    - In-progress requests return HTTP 409 with `Idempotent-Replayed: false`
    - Failed requests return HTTP 412 with `Idempotent-Replayed: false`
    - Idempotency keys expire after 24 hours

  version: "2.0.0"
  contact:
    email: support@ahasend.com
  license:
    name: MIT
    identifier: MIT
servers:
  - url: https://api.ahasend.com
    description: Production server

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: "aha-sk-64-CHARACTER-RANDOM-STRING"
      description: API key for authentication

  parameters:
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      required: false
      description: |
        Optional idempotency key for safe request retries. Must be a unique string for each logical request.
        Requests with the same key will return the same response. Keys expire after 24 hours.
      schema:
        type: string
        maxLength: 255
      example: "user-12345-create-domain-20240101"

  headers:
    IdempotentReplayed:
      description: |
        Indicates whether this response is replayed from a previous identical request.
        - `true`: Response was replayed from cache (duplicate request)
        - `false`: Response from original processing or error state
      schema:
        type: string
        enum: [true, false]

  responses:
    IdempotencyConflict:
      description: Request in progress - a request with this idempotency key is already being processed
      headers:
        Idempotent-Replayed:
          $ref: '#/components/headers/IdempotentReplayed'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: "A request with this idempotency key is already in progress"

    IdempotencyPreconditionFailed:
      description: Original request failed - the request with this idempotency key previously failed and cannot be retried
      headers:
        Idempotent-Replayed:
          $ref: '#/components/headers/IdempotentReplayed'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: "The original request with this idempotency key failed and cannot be retried"

  schemas:
    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Error description
      example:
        message: "Error message"

    SuccessResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Success message
      example:
        message: "Operation completed successfully"

    PaginationInfo:
      type: object
      required:
        - has_more
      properties:
        has_more:
          type: boolean
          description: Whether there are more items available
        next_cursor:
          type: string
          description: Cursor for the next page of results
      example:
        has_more: true
        next_cursor: "eyJpZCI6MTIzNH0="

    # API Key Schemas
    APIKeyScope:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the scope
        created_at:
          type: string
          format: date-time
          description: When the scope was created
        updated_at:
          type: string
          format: date-time
          description: When the scope was last updated
        api_key_id:
          type: string
          format: uuid
          description: ID of the API key this scope belongs to
        scope:
          type: string
          description: The scope string
        domain_id:
          type: string
          format: uuid
          description: Domain ID for domain-specific scopes
      required:
        - id
        - created_at
        - updated_at
        - api_key_id
        - scope

    APIKey:
      type: object
      properties:
        object:
          type: string
          enum: [api_key]
          description: Object type identifier
        id:
          type: string
          format: uuid
          description: Unique identifier for the API key
        created_at:
          type: string
          format: date-time
          description: When the API key was created
        updated_at:
          type: string
          format: date-time
          description: When the API key was last updated
        last_used_at:
          type: string
          format: date-time
          description: When the API key was last used (updates every 5-10 minutes)
        account_id:
          type: string
          format: uuid
          description: Account ID this API key belongs to
        label:
          type: string
          description: Human-readable label for the API key
        public_key:
          type: string
          description: Public portion of the API key
        secret_key:
          type: string
          description: Secret key (only returned on creation)
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/APIKeyScope'
          description: Scopes granted to this API key
      required:
        - object
        - id
        - created_at
        - updated_at
        - account_id
        - label
        - public_key
        - scopes

    CreateAPIKeyRequest:
      type: object
      required:
        - label
        - scopes
      properties:
        label:
          type: string
          maxLength: 255
          description: Human-readable label for the API key
        scopes:
          type: array
          items:
            type: string
          minItems: 1
          description: Array of scope strings to grant to this API key
      example:
        label: "Production API Key"
        scopes: ["messages:send:all", "domains:read"]

    UpdateAPIKeyRequest:
      type: object
      properties:
        label:
          type: string
          maxLength: 255
          description: Human-readable label for the API key
        scopes:
          type: array
          items:
            type: string
          minItems: 1
          description: Array of scope strings to grant to this API key
      example:
        label: "Updated API Key"
        scopes: ["messages:send:example.com", "domains:read"]

    PaginatedAPIKeysResponse:
      type: object
      required:
        - object
        - data
        - pagination
      properties:
        object:
          type: string
          enum: [list]
          description: Object type identifier
        data:
          type: array
          items:
            $ref: '#/components/schemas/APIKey'
          description: Array of API keys
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    # Domain Schemas
    DNSRecord:
      type: object
      properties:
        type:
          type: string
          description: DNS record type (e.g., CNAME, TXT, MX)
        host:
          type: string
          description: DNS record host/name
        content:
          type: string
          description: DNS record content/value
        required:
          type: boolean
          description: Whether this DNS record is required for domain verification
        propagated:
          type: boolean
          description: Whether this DNS record has been propagated and verified
      required:
        - type
        - host
        - content
        - required
        - propagated

    Domain:
      type: object
      properties:
        object:
          type: string
          enum: [domain]
          description: Object type identifier
        id:
          type: string
          format: uuid
          description: Unique identifier for the domain
        created_at:
          type: string
          format: date-time
          description: When the domain was created
        updated_at:
          type: string
          format: date-time
          description: When the domain was last updated
        domain:
          type: string
          description: The domain name
        account_id:
          type: string
          format: uuid
          description: Account ID this domain belongs to
        dns_records:
          type: array
          items:
            $ref: '#/components/schemas/DNSRecord'
          description: DNS records required for domain verification
        last_dns_check_at:
          type: string
          nullable: string
          format: date-time
          description: When DNS records were last checked
        dns_valid:
          type: boolean
          description: Whether all required DNS records are properly configured
      required:
        - object
        - id
        - created_at
        - updated_at
        - domain
        - account_id
        - dns_records
        - dns_valid

    CreateDomainRequest:
      type: object
      required:
        - domain
      properties:
        domain:
          type: string
          format: hostname
          description: Fully qualified domain name
      example:
        domain: "example.com"

    PaginatedDomainsResponse:
      type: object
      required:
        - object
        - data
        - pagination
      properties:
        object:
          type: string
          enum: [list]
          description: Object type identifier
        data:
          type: array
          items:
            $ref: '#/components/schemas/Domain'
          description: Array of domains
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    # Message Schemas
    SenderAddress:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: Valid email address from a domain defined in your account with valid DNS records
        name:
          type: string
          description: Display name for the sender
      example:
        email: "noreply@example.com"
        name: "Example Corp"

    Recipient:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: Recipient email address
        name:
          type: string
          description: Display name for the recipient
        substitutions:
          type: object
          additionalProperties: true
          description: Substitution data for the recipient. Used with jinja2 templating language for dynamic content
      example:
        email: "user@example.com"
        name: "John Doe"
        substitutions:
          first_name: "John"
          order_id: "12345"

    Attachment:
      type: object
      required:
        - data
        - content_type
        - file_name
      properties:
        base64:
          type: boolean
          description: If true, data must be encoded using base64. Otherwise, data will be interpreted as UTF-8
          default: false
        data:
          type: string
          description: Either plaintext or base64 encoded attachment data (depending on base64 field)
        content_type:
          type: string
          description: The MIME type of the attachment
        content_disposition:
          type: string
          description: The disposition of the attachment
        content_id:
          type: string
          description: The Content-ID of the attachment for inline images
        file_name:
          type: string
          description: The filename of the attachment
      example:
        base64: true
        data: "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg=="
        content_type: "image/png"
        file_name: "pixel.png"

    Tracking:
      type: object
      nullable: true
      properties:
        open:
          type: boolean
          nullable: true
          description: Whether to track opens
        click:
          type: boolean
          nullable: true
          description: Whether to track clicks
      example:
        open: true
        click: true

    Retention:
      type: object
      nullable: true
      properties:
        metadata:
          type: integer
          nullable: true
          description: Number of days to retain metadata
          minimum: 1
          maximum: 30
        data:
          type: integer
          nullable: true
          description: Number of days to retain data
          minimum: 0
          maximum: 30
      example:
        metadata: 1
        data: 0
    MessageSchedule:
      type: object
      properties:
        first_attempt:
          type: string
          format: date-time
          description: The time to make the first attempt for delivering the message (RFC3339 format)
        expires:
          type: string
          format: date-time
          description: Expire and drop the message if not delivered by this time (RFC3339 format)
      example:
        first_attempt: "2023-12-25T10:30:00Z"
        expires: "2023-12-26T10:30:00Z"

    CreateMessageRequest:
      type: object
      required:
        - from
        - recipients
        - subject
      properties:
        from:
          $ref: '#/components/schemas/SenderAddress'
        recipients:
          type: array
          items:
            $ref: '#/components/schemas/Recipient'
          minItems: 1
          description: This does not set the To header to multiple addresses, it sends a separate message for each recipient
        reply_to:
          $ref: '#/components/schemas/SenderAddress'
          description: If provided, the reply-to header in headers array must not be provided
        subject:
          type: string
          description: Email subject line
        text_content:
          type: string
          description: Plain text content. Required if html_content is empty
        html_content:
          type: string
          description: HTML content. Required if text_content is empty
        amp_content:
          type: string
          description: AMP HTML content
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
          description: File attachments
        headers:
          type: object
          additionalProperties:
            type: string
          description: Custom email headers. reply-to header cannot be provided if reply_to is provided, message-id will be ignored and automatically generated
        substitutions:
          type: object
          additionalProperties: true
          description: Global substitutions, recipient substitutions override global
        tags:
          type: array
          items:
            type: string
          description: Tags for categorizing messages
        sandbox:
          type: boolean
          description: If true, the message will be sent to the sandbox environment
          default: false
        sandbox_result:
          type: string
          enum: [deliver, bounce, defer, fail, suppress]
          description: The result of the sandbox send
        tracking:
          $ref: '#/components/schemas/Tracking'
          description: Tracking settings for the message, overrides default account settings
        retention:
          $ref: '#/components/schemas/Retention'
          description: Retention settings for the message, overrides default account settings
        schedule:
          $ref: '#/components/schemas/MessageSchedule'
          description: Schedule for message delivery
      example:
        from:
          email: "noreply@example.com"
          name: "Example Corp"
        recipients:
          - email: "user@example.com"
            name: "John Doe"
        subject: "Welcome to Example Corp"
        html_content: "<h1>Welcome {{first_name}}!</h1>"
        text_content: "Welcome {{first_name}}!"
        substitutions:
          first_name: "John"

    CreateSingleMessageResponse:
      type: object
      required:
        - object
        - recipient
        - status
      properties:
        object:
          type: string
          enum: [message]
          description: Object type identifier
        id:
          type: string
          nullable: true
          description: Message ID (null if the message was not sent)
          example: <uuid@example.com>
        recipient:
          $ref: '#/components/schemas/Recipient'
        status:
          type: string
          enum: [queued, scheduled, error]
          description: Status of the message
        error:
          type: string
          nullable: true
          description: Error message if the message was not sent
        schedule:
          $ref: '#/components/schemas/MessageSchedule'
          description: Provided if the request contained a schedule

    CreateMessageResponse:
      type: object
      required:
        - object
        - data
      properties:
        object:
          type: string
          enum: [list]
          description: Object type identifier
        data:
          type: array
          items:
            $ref: '#/components/schemas/CreateSingleMessageResponse'
          description: List of messages and their statuses

    DeliveryEvent:
      type: object
      properties:
        time:
          type: string
          format: date-time
          description: Timestamp of the delivery event
        log:
          type: string
          description: Log message for the delivery event
        status:
          type: string
          description: Status of the delivery event
      required:
        - time
        - log
        - status

    MessageContentPart:
      type: object
      properties:
        content_type:
          type: string
          description: MIME content type (e.g., "text/plain", "text/html")
          example: "text/html"
        content:
          type: string
          description: The actual content for this part
      required:
        - content_type
        - content

    MessageAttachment:
      type: object
      properties:
        filename:
          type: string
          description: Original filename of the attachment
          example: "document.pdf"
        content:
          type: string
          description: Base64 encoded attachment content
        content_type:
          type: string
          description: MIME content type of the attachment
          example: "application/pdf"
        content_id:
          type: string
          description: Content-ID for inline attachments
          nullable: true
          example: "image001@example.com"
      required:
        - filename
        - content
        - content_type

    MessageContentParsed:
      type: object
      properties:
        parts:
          type: array
          items:
            $ref: '#/components/schemas/MessageContentPart'
          description: Array of message content parts (text, HTML, etc.)
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/MessageAttachment'
          description: Array of message attachments
        headers:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: Email headers as key-value pairs (values are arrays to handle multiple headers with same name)
          example:
            "Content-Type": ["text/html; charset=utf-8"]
            "X-Custom-Header": ["value1", "value2"]
      required:
        - parts
        - attachments
        - headers

    # Base message schema without heavy content fields
    MessageSummary:
      type: object
      properties:
        object:
          type: string
          enum: [message]
          description: Object type identifier
        created_at:
          type: string
          format: date-time
          description: When the message was created
        updated_at:
          type: string
          format: date-time
          description: When the message was last updated
        sent_at:
          type: string
          format: date-time
          nullable: true
          description: When the message was sent
        delivered_at:
          type: string
          format: date-time
          nullable: true
          description: When the message was delivered
        retain_until:
          type: string
          format: date-time
          description: When the message data will be purged
        direction:
          type: string
          enum: [incoming, outgoing]
          description: Message direction
        is_bounce_notification:
          type: boolean
          description: Whether this is a bounce notification
        bounce_classification:
          type: string
          description: Classification of bounce if applicable
        delivery_attempts:
          type: array
          items:
            $ref: '#/components/schemas/DeliveryEvent'
          description: List of delivery attempts for this message
        message_id:
          type: string
          description: Message-ID header value
        id:
          type: string
          format: uuid
          description: API-generated message ID
        subject:
          type: string
          description: Message subject
        tags:
          type: array
          items:
            type: string
          description: Tags associated with the message
        sender:
          type: string
          format: email
          description: Sender email address
        recipient:
          type: string
          format: email
          description: Recipient email address
        status:
          type: string
          description: Current message status
        num_attempts:
          type: integer
          description: Number of delivery attempts
        click_count:
          type: integer
          description: Number of clicks tracked for this message
        open_count:
          type: integer
          description: Number of opens tracked for this message
        reference_message_id:
          type: integer
          format: int64
          description: ID of the original message (for bounce messages)
        domain_id:
          type: string
          format: uuid
          description: Domain ID this message was sent from
        account_id:
          type: string
          format: uuid
          description: Account ID this message belongs to
      required:
        - object
        - created_at
        - updated_at
        - retain_until
        - direction
        - is_bounce_notification
        - delivery_attempts
        - message_id
        - id
        - subject
        - tags
        - sender
        - recipient
        - status
        - num_attempts
        - click_count
        - open_count
        - domain_id
        - account_id

    # Full message schema with content fields
    Message:
      allOf:
        - $ref: '#/components/schemas/MessageSummary'
        - type: object
          properties:
            content:
              type: string
              nullable: true
              description: Original, raw email content (RFC822 format) - may be null if the message content is not available.
            content_parsed:
              $ref: '#/components/schemas/MessageContentParsed'
              description: Parsed and structured message content including parts, attachments, and headers - may be null if the message content is not available.

    # Update the paginated response to use the lighter schema
    PaginatedMessagesResponse:
      type: object
      required:
        - object
        - data
        - pagination
      properties:
        object:
          type: string
          enum: [list]
          description: Object type identifier
        data:
          type: array
          items:
            $ref: '#/components/schemas/MessageSummary'
          description: Array of message summaries (content and content_parsed fields omitted for performance)
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    # Account Schemas
    Account:
      type: object
      properties:
        object:
          type: string
          enum: [account]
          description: Object type identifier
        id:
          type: string
          format: uuid
          description: Unique identifier for the account
        created_at:
          type: string
          format: date-time
          description: When the account was created
        updated_at:
          type: string
          format: date-time
          description: When the account was last updated
        name:
          type: string
          description: Account name
        website:
          type: string
          format: uri
          nullable: true
          description: Account website URL
        about:
          type: string
          nullable: true
          description: Account description
        track_opens:
          type: boolean
          description: Default open tracking setting
        track_clicks:
          type: boolean
          description: Default click tracking setting
        reject_bad_recipients:
          type: boolean
          description: Whether to reject bad recipients
        reject_mistyped_recipients:
          type: boolean
          description: Whether to reject mistyped recipients
        message_metadata_retention:
          type: integer
          description: Default message metadata retention in days
        message_data_retention:
          type: integer
          description: Default message data retention in days
      required:
        - object
        - id
        - created_at
        - updated_at
        - name

    UpdateAccountRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
          description: Account name
        website:
          type: string
          format: uri
          description: Account website URL
        about:
          type: string
          description: Account description (used for account verification)
        track_opens:
          type: boolean
          description: Default open tracking setting
        track_clicks:
          type: boolean
          description: Default click tracking setting
        reject_bad_recipients:
          type: boolean
          description: Whether to reject bad recipients
        reject_mistyped_recipients:
          type: boolean
          description: Whether to reject mistyped recipients
        message_metadata_retention:
          type: integer
          minimum: 1
          maximum: 30
          description: Default message metadata retention in days
        message_data_retention:
          type: integer
          minimum: 0
          maximum: 30
          description: Default message data retention in days
      example:
        name: "Updated Company Name"
        website: "https://example.com"
        track_opens: true

    UserAccount:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user account relationship
        created_at:
          type: string
          format: date-time
          description: When the relationship was created
        updated_at:
          type: string
          format: date-time
          description: When the relationship was last updated
        user_id:
          type: string
          format: uuid
          description: User ID
        account_id:
          type: string
          format: uuid
          description: Account ID
        role:
          type: string
          enum: [Administrator, Developer, Analyst, "Billing Manager"]
          description: User role in the account
      required:
        - id
        - created_at
        - updated_at
        - user_id
        - account_id
        - role

    AccountMembersResponse:
      type: object
      required:
        - object
        - data
      properties:
        object:
          type: string
          enum: [list]
          description: Object type identifier
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserAccount'
          description: Array of account members

    AddMemberRequest:
      type: object
      required:
        - email
        - role
      properties:
        email:
          type: string
          format: email
          description: Email address of the user to add
        name:
          type: string
          description: Display name for the user
        role:
          type: string
          enum: [Administrator, Developer, Analyst, "Billing Manager"]
          description: Role to assign to the user
      example:
        email: "user@example.com"
        name: "John Doe"
        role: "Developer"

    # Suppression Schemas
    Suppression:
      type: object
      properties:
        object:
          type: string
          enum: [suppression]
          description: Object type identifier
        id:
          type: string
          format: uuid
          description: Unique identifier for the suppression
        created_at:
          type: string
          format: date-time
          description: When the suppression was created
        updated_at:
          type: string
          format: date-time
          description: When the suppression was last updated
        email:
          type: string
          format: email
          description: Suppressed email address
        domain:
          type: string
          nullable: true
          description: Domain for which the email is suppressed
        reason:
          type: string
          nullable: true
          description: Reason for suppression
        expires_at:
          type: string
          format: date-time
          description: When the suppression expires
      required:
        - object
        - id
        - created_at
        - updated_at
        - email
        - expires_at

    CreateSuppressionResponse:
      type: object
      required:
        - object
        - data
      properties:
        object:
          type: string
          enum: [list]
          description: Object type identifier
        data:
          type: array
          items:
            $ref: '#/components/schemas/Suppression'
          description: Array of suppressions

    CreateSuppressionRequest:
      type: object
      required:
        - email
        - expires_at
      properties:
        email:
          type: string
          format: email
          description: Email address to suppress
        domain:
          type: string
          format: hostname
          description: Domain for which to suppress the email
        reason:
          type: string
          maxLength: 255
          description: Reason for suppression
        expires_at:
          type: string
          format: date-time
          description: When the suppression expires (RFC3339 format)
      example:
        email: "user@example.com"
        domain: "example.com"
        reason: "User requested removal"
        expires_at: "2024-12-25T10:30:00Z"

    PaginatedSuppressionsResponse:
      type: object
      required:
        - object
        - data
        - pagination
      properties:
        object:
          type: string
          enum: [list]
          description: Object type identifier
        data:
          type: array
          items:
            $ref: '#/components/schemas/Suppression'
          description: Array of suppressions
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    # Route Schemas
    Route:
      type: object
      properties:
        object:
          type: string
          enum: [route]
          description: Object type identifier
        id:
          type: string
          format: uuid
          description: Unique identifier for the route
        created_at:
          type: string
          format: date-time
          description: When the route was created
        updated_at:
          type: string
          format: date-time
          description: When the route was last updated
        name:
          type: string
          description: Route name
        url:
          type: string
          format: uri
          description: Webhook URL for the route
        recipient:
          type: string
          nullable: true
          description: Recipient filter
        attachments:
          type: boolean
          description: Whether to include attachments in route payload
        headers:
          type: boolean
          description: Whether to include headers in route payload
        group_by_message_id:
          type: boolean
          description: Whether to group by message ID
        strip_replies:
          type: boolean
          description: Whether to strip reply content
        enabled:
          type: boolean
          description: Whether the route is enabled
        success_count:
          type: integer
          description: Number of successful calls
        error_count:
          type: integer
          description: Number of unsuccessful calls
        errors_since_last_success:
          type: integer
          description: Number of consecutive failed calls
        last_request_at:
          type: string
          format: date-time
          description: When the route was last called
      required:
        - object
        - id
        - created_at
        - updated_at
        - name
        - url
        - enabled

    CreateRouteRequest:
      type: object
      required:
        - name
        - url
      properties:
        name:
          type: string
          maxLength: 255
          description: Route name
        url:
          type: string
          format: uri
          description: Webhook URL for the route
        recipient:
          type: string
          maxLength: 255
          description: Recipient filter
        attachments:
          type: boolean
          description: Whether to include attachments in webhooks
          default: false
        headers:
          type: boolean
          description: Whether to include headers in webhooks
          default: false
        group_by_message_id:
          type: boolean
          description: Whether to group by message ID
          default: false
        strip_replies:
          type: boolean
          description: Whether to strip reply content
          default: false
        enabled:
          type: boolean
          description: Whether the route is enabled
          default: true
      example:
        name: "Support Route"
        url: "https://example.com/webhook"
        enabled: true

    UpdateRouteRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
          nullable: true
          description: Route name
        url:
          type: string
          format: uri
          nullable: true
          description: Webhook URL for the route
        recipient:
          type: string
          maxLength: 255
          nullable: true
          description: Recipient filter
        attachments:
          type: boolean
          nullable: true
          description: Whether to include attachments in webhooks
        headers:
          type: boolean
          nullable: true
          description: Whether to include headers in webhooks
        group_by_message_id:
          type: boolean
          nullable: true
          description: Whether to group by message ID
        strip_replies:
          type: boolean
          nullable: true
          description: Whether to strip reply content
        enabled:
          type: boolean
          nullable: true
          description: Whether the route is enabled
      example:
        name: "Updated Support Route"
        enabled: false

    PaginatedRoutesResponse:
      type: object
      required:
        - object
        - data
        - pagination
      properties:
        object:
          type: string
          enum: [list]
          description: Object type identifier
        data:
          type: array
          items:
            $ref: '#/components/schemas/Route'
          description: Array of routes
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    # Webhook Schemas
    Webhook:
      type: object
      properties:
        object:
          type: string
          enum: [webhook]
          description: Object type identifier
        id:
          type: string
          format: uuid
          description: Unique identifier for the webhook
        created_at:
          type: string
          format: date-time
          description: When the webhook was created
        updated_at:
          type: string
          format: date-time
          description: When the webhook was last updated
        name:
          type: string
          description: Webhook name
        url:
          type: string
          format: uri
          description: Webhook URL
        enabled:
          type: boolean
          description: Whether the webhook is enabled
        on_reception:
          type: boolean
          description: Trigger on message reception
        on_delivered:
          type: boolean
          description: Trigger on message delivery
        on_transient_error:
          type: boolean
          description: Trigger on transient errors
        on_failed:
          type: boolean
          description: Trigger on permanent failures
        on_bounced:
          type: boolean
          description: Trigger on bounces
        on_suppressed:
          type: boolean
          description: Trigger on suppressions
        on_opened:
          type: boolean
          description: Trigger on opens
        on_clicked:
          type: boolean
          description: Trigger on clicks
        on_suppression_created:
          type: boolean
          description: Trigger on suppression creation
        on_dns_error:
          type: boolean
          description: Trigger on DNS errors
        scope:
          type: string
          description: Webhook scope
        domains:
          type: array
          items:
            type: string
          description: Domains this webhook applies to
        success_count:
          type: integer
          description: Number of successful calls
        error_count:
          type: integer
          description: Number of unsuccessful calls
        errors_since_last_success:
          type: integer
          description: Number of consecutive failed calls
        last_request_at:
          type: string
          format: date-time
          description: When the webhook was last called
      required:
        - object
        - id
        - created_at
        - updated_at
        - name
        - url
        - enabled

    CreateWebhookRequest:
      type: object
      required:
        - name
        - url
      properties:
        name:
          type: string
          maxLength: 255
          description: Webhook name
        url:
          type: string
          format: uri
          description: Webhook URL
        enabled:
          type: boolean
          description: Whether the webhook is enabled
          default: true
        on_reception:
          type: boolean
          description: Trigger on message reception
          default: false
        on_delivered:
          type: boolean
          description: Trigger on message delivery
          default: false
        on_transient_error:
          type: boolean
          description: Trigger on transient errors
          default: false
        on_failed:
          type: boolean
          description: Trigger on permanent failures
          default: false
        on_bounced:
          type: boolean
          description: Trigger on bounces
          default: false
        on_suppressed:
          type: boolean
          description: Trigger on suppressions
          default: false
        on_opened:
          type: boolean
          description: Trigger on opens
          default: false
        on_clicked:
          type: boolean
          description: Trigger on clicks
          default: false
        on_suppression_created:
          type: boolean
          description: Trigger on suppression creation
          default: false
        on_dns_error:
          type: boolean
          description: Trigger on DNS errors
          default: false
        scope:
          type: string
          description: Webhook scope
        domains:
          type: array
          items:
            type: string
          nullable: true
          description: Domains this webhook applies to
      example:
        name: "Delivery Webhook"
        url: "https://example.com/webhook"
        enabled: true
        on_delivered: true

    UpdateWebhookRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
          nullable: true
          description: Webhook name
        url:
          type: string
          format: uri
          nullable: true
          description: Webhook URL
        enabled:
          type: boolean
          nullable: true
          description: Whether the webhook is enabled
        on_reception:
          type: boolean
          nullable: true
          description: Trigger on message reception
        on_delivered:
          type: boolean
          nullable: true
          description: Trigger on message delivery
        on_transient_error:
          type: boolean
          nullable: true
          description: Trigger on transient errors
        on_failed:
          type: boolean
          nullable: true
          description: Trigger on permanent failures
        on_bounced:
          type: boolean
          nullable: true
          description: Trigger on bounces
        on_suppressed:
          type: boolean
          nullable: true
          description: Trigger on suppressions
        on_opened:
          type: boolean
          nullable: true
          description: Trigger on opens
        on_clicked:
          type: boolean
          nullable: true
          description: Trigger on clicks
        on_suppression_created:
          type: boolean
          nullable: true
          description: Trigger on suppression creation
        on_dns_error:
          type: boolean
          nullable: true
          description: Trigger on DNS errors
        scope:
          type: string
          nullable: true
          description: Webhook scope
        domains:
          type: array
          nullable: true
          items:
            type: string
          description: Domains this webhook applies to

    PaginatedWebhooksResponse:
      type: object
      required:
        - object
        - data
        - pagination
      properties:
        object:
          type: string
          enum: [list]
          description: Object type identifier
        data:
          type: array
          items:
            $ref: '#/components/schemas/Webhook'
          description: Array of webhooks
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    # SMTP Credentials Schemas
    SMTPCredential:
      type: object
      properties:
        object:
          type: string
          enum: [smtp_credential]
          description: Object type identifier
        id:
          type: string
          format: uuid
          description: Unique identifier for the SMTP credential
        created_at:
          type: string
          format: date-time
          description: When the credential was created
        updated_at:
          type: string
          format: date-time
          description: When the credential was last updated
        name:
          type: string
          description: Credential name
        username:
          type: string
          description: SMTP username
        sandbox:
          type: boolean
          description: Whether this is a sandbox credential
        scope:
          type: string
          enum: [global, scoped]
          description: Credential scope
        domains:
          type: array
          items:
            type: string
          description: Domains this credential can send from
      required:
        - object
        - id
        - created_at
        - updated_at
        - name
        - username
        - sandbox
        - scope

    CreateSMTPCredentialRequest:
      type: object
      required:
        - name
        - scope
      properties:
        name:
          type: string
          maxLength: 255
          description: Credential name
        sandbox:
          type: boolean
          description: Whether this is a sandbox credential
          default: false
        scope:
          type: string
          enum: [global, scoped]
          description: Credential scope - "global" or "scoped"
        domains:
          type: array
          items:
            type: string
          description: Required if scope is "scoped"
      example:
        name: "Production SMTP"
        username: "smtp_user"
        password: "secure_password"
        scope: "global"

    PaginatedSMTPCredentialsResponse:
      type: object
      required:
        - object
        - data
        - pagination
      properties:
        object:
          type: string
          enum: [list]
          description: Object type identifier
        data:
          type: array
          items:
            $ref: '#/components/schemas/SMTPCredential'
          description: Array of SMTP credentials
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    # Statistics Schemas
    DeliverabilityStatistics:
      type: object
      properties:
        from_timestamp:
          type: string
          format: date-time
          description: Start time of the statistics bucket
        to_timestamp:
          type: string
          format: date-time
          description: End time of the statistics bucket
        reception_count:
          type: integer
          description: Number of messages accepted for delivery
        delivered_count:
          type: integer
          description: Number of messages delivered
        deferred_count:
          type: integer
          description: Number of messages deferred
        bounced_count:
          type: integer
          description: Number of messages bounced
        failed_count:
          type: integer
          description: Number of messages failed
        suppressed_count:
          type: integer
          description: Number of messages suppressed
        opened_count:
          type: integer
          description: Number of messages opened at least once
        clicked_count:
          type: integer
          description: Number of messages that have at least one link in them clicked.
      required:
        - from_timestamp
        - to_timestamp

    DeliverabilityStatisticsResponse:
      type: object
      required:
        - object
        - data
      properties:
        object:
          type: string
          enum: [list]
          description: Object type identifier
        data:
          type: array
          items:
            $ref: '#/components/schemas/DeliverabilityStatistics'
          description: Array of deliverability statistics

    Bounce:
      type: object
      properties:
        classification:
          type: string
          description: Bounce classification
        count:
          type: integer
          description: Number of bounces
      required:
        - classification
        - count
    BounceStatistics:
      type: object
      properties:
        from_timestamp:
          type: string
          format: date-time
          description: Start time of the statistics bucket
        to_timestamp:
          type: string
          format: date-time
          description: End time of the statistics bucket
        bounces:
          type: array
          items:
            $ref: '#/components/schemas/Bounce'
          description: Bounce count per bounce classification
      required:
        - from_timestamp
        - to_timestamp
        - bounces

    BounceStatisticsResponse:
      type: object
      required:
        - object
        - data
      properties:
        object:
          type: string
          enum: [list]
          description: Object type identifier
        data:
          type: array
          items:
            $ref: '#/components/schemas/BounceStatistics'
          description: Array of bounce statistics

    DeliveryTimeStatistics:
      type: object
      properties:
        from_timestamp:
          type: string
          format: date-time
          description: Start time of the statistics bucket
        to_timestamp:
          type: string
          format: date-time
          description: End time of the statistics bucket
        avg_delivery_time:
          type: number
          format: double
          description: Average delivery time in seconds
        delivered_count:
          type: integer
          description: Number of messages
        delivery_times:
          type: array
          items:
            $ref: '#/components/schemas/DeliveryTime'
            description: Delivery times per recipient domain
      required:
        - from_timestamp
        - to_timestamp
        - avg_delivery_time
        - delivered_count

    DeliveryTime:
      type: object
      properties:
        recipient_domain:
          type: string
          format: fqdn
          description: The recipient domain
        delivery_time:
          type: number
          format: double
          description: The average time from reception to delivery in seconds


    DeliveryTimeStatisticsResponse:
      type: object
      required:
        - object
        - data
      properties:
        object:
          type: string
          enum: [list]
          description: Object type identifier
        data:
          type: array
          items:
            $ref: '#/components/schemas/DeliveryTimeStatistics'
          description: Array of delivery time statistics

paths:
  # Utility endpoints
  /v2/ping:
    get:
      summary: Ping
      description: Health check endpoint that returns a simple pong response
      operationId: ping
      tags:
        - Utility
      security:
        - BearerAuth: []
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go/api"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.UtilityAPI.Ping(ctx)
              if err != nil {
                log.Fatalf("Error pinging API: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Ping successful! Status: %d\n", httpResp.StatusCode)
                if response != nil && response.Message != "" {
                    fmt.Printf("Response: %s\n", response.Message)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }



      responses:
        '200':
          description: Pong response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: "pong"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: "missing or malformed bearer token"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: invalid API key
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: insufficient permissions for the required scope
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: internal server error

  # API Keys endpoints
  /v2/accounts/{account_id}/api-keys:
    get:
      summary: Get API Keys
      description: Returns a list of API keys for the account
      operationId: getAPIKeys
      tags:
        - API Keys
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: Maximum number of items to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
        - name: cursor
          in: query
          description: Pagination cursor for the next page
          schema:
            type: string
      security:
        - BearerAuth: ["api-keys:read"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go/api"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.APIKeysAPI.GetAPIKeys(
                ctx,
                accountID,
                nil,
                nil,
              )
              if err != nil {
                log.Fatalf("Error getting API keys: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Found %d API keys\n", len(response.Data))
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }

      responses:
        '200':
          description: List of API keys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAPIKeysResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create API Key
      description: Creates a new API key with the specified scopes
      operationId: createAPIKey
      tags:
        - API Keys
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/IdempotencyKey'
      security:
        - BearerAuth: ["api-keys:write"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go/api"
              "github.com/AhaSend/ahasend-go/models/requests"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.APIKeysAPI.CreateAPIKey(
                ctx,
                accountID,
                requests.CreateAPIKeyRequest{
                  Label: "My API Key",
                  Scopes: []string{
                    "messages:read:all",
                    "domains:read:all",
                  },
                },
              )
              if err != nil {
                log.Fatalf("Error creating API key: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Created API key, secret key: %s\n", response.SecretKey)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAPIKeyRequest'
      responses:
        '201':
          description: API key created successfully
          headers:
            Idempotent-Replayed:
              $ref: '#/components/headers/IdempotentReplayed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          $ref: '#/components/responses/IdempotencyConflict'
        '412':
          $ref: '#/components/responses/IdempotencyPreconditionFailed'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v2/accounts/{account_id}/api-keys/{key_id}:
    get:
      summary: Get API Key
      description: Returns a specific API key by ID
      operationId: getAPIKey
      tags:
        - API Keys
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: key_id
          in: path
          required: true
          description: API Key ID
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: ["api-keys:read"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go/api"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.APIKeysAPI.GetAPIKey(
                ctx,
                accountID,
                uuid.MustParse("c5a32c40-b351-439f-8230-779daed3e42c"),
              )
              if err != nil {
                log.Fatalf("Error getting API key: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("API key: %#v\n", response)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }
      responses:
        '200':
          description: API key details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update API Key
      description: Updates an existing API key's label and scopes
      operationId: updateAPIKey
      tags:
        - API Keys
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: key_id
          in: path
          required: true
          description: API Key ID
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: ["api-keys:write"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go"
              "github.com/AhaSend/ahasend-go/api"
              "github.com/AhaSend/ahasend-go/models/requests"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.APIKeysAPI.UpdateAPIKey(
                ctx,
                accountID,
                uuid.MustParse("c5a32c40-b351-439f-8230-779daed3e42c"),
                requests.UpdateAPIKeyRequest{
                  Label: ahasend.String("My API Key"),
                  Scopes: &[]string{
                    "messages:read:all",
                    "domains:read:all",
                  },
                },
              )
              if err != nil {
                log.Fatalf("Error updating API key: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Updated API key: %#v\n", response)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAPIKeyRequest'
      responses:
        '200':
          description: API key updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete API Key
      description: Deletes an API key
      operationId: deleteAPIKey
      tags:
        - API Keys
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: key_id
          in: path
          required: true
          description: API Key ID
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: ["api-keys:delete"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go/api"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.APIKeysAPI.DeleteAPIKey(
                ctx,
                accountID,
                uuid.MustParse("c5a32c40-b351-439f-8230-779daed3e42c"),
              )
              if err != nil {
                log.Fatalf("Error deleting API key: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Deleted API key: %#v\n", response)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }
      responses:
        '200':
          description: API key deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: "api key {id} ({label}) deleted successfully"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Domains endpoints
  /v2/accounts/{account_id}/domains:
    get:
      summary: Get Domains
      description: Returns a list of domains for the account
      operationId: getDomains
      tags:
        - Domains
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: dns_valid
          in: query
          description: Filter results by DNS validation status
          schema:
            type: boolean
            nullable: true
        - name: limit
          in: query
          description: Maximum number of items to return (1-100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
        - name: cursor
          in: query
          description: Pagination cursor for the next page
          schema:
            type: string
      security:
        - BearerAuth: ["domains:read"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go/api"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.DomainsAPI.GetDomains(
                ctx,
                accountID,
                nil,
                nil,
                nil,
              )
              if err != nil {
                log.Fatalf("Error getting domains: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Found %d domains\n", len(response.Data))
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }

      responses:
        '200':
          description: List of domains
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDomainsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create Domain
      description: Creates a new domain
      operationId: createDomain
      tags:
        - Domains
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/IdempotencyKey'
      security:
        - BearerAuth: ["domains:write"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go/api"
              "github.com/AhaSend/ahasend-go/models/requests"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.DomainsAPI.CreateDomain(
                ctx,
                accountID,
                requests.CreateDomainRequest{
                  Domain: "example.com",
                },
              )
              if err != nil {
                log.Fatalf("Error creating domain: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Created domain: %#v\n", response)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDomainRequest'
      responses:
        '201':
          description: Domain created successfully
          headers:
            Idempotent-Replayed:
              $ref: '#/components/headers/IdempotentReplayed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          $ref: '#/components/responses/IdempotencyConflict'
        '412':
          $ref: '#/components/responses/IdempotencyPreconditionFailed'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v2/accounts/{account_id}/domains/{domain}:
    get:
      summary: Get Domain
      description: Returns a specific domain by name
      operationId: getDomain
      tags:
        - Domains
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: domain
          in: path
          required: true
          description: Domain name
          schema:
            type: string
      security:
        - BearerAuth: ["domains:read"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go/api"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.DomainsAPI.GetDomain(
                ctx,
                accountID,
                "example.com",
              )
              if err != nil {
                log.Fatalf("Error getting domain: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Domain: %#v\n", response)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }
      responses:
        '200':
          description: Domain details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete Domain
      description: Deletes a domain
      operationId: deleteDomain
      tags:
        - Domains
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: domain
          in: path
          required: true
          description: Domain name
          schema:
            type: string
      security:
        - BearerAuth: ["domains:delete:{domain}", "domains:delete:all"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go/api"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.DomainsAPI.DeleteDomain(
                ctx,
                accountID,
                "example.com",
              )
              if err != nil {
                log.Fatalf("Error deleting domain: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Deleted domain: %#v\n", response)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }

      responses:
        '200':
          description: Domain deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Domain not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Messages endpoints
  /v2/accounts/{account_id}/messages:
    get:
      summary: Get Messages
      description: |
        Returns a list of message summaries for the account. Can be filtered by various parameters.

      operationId: getMessages
      tags:
        - Messages
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          description: Filter by comma-separated list of message statuses
          schema:
            type: string
          example: "Bounced,Failed"
        - name: sender
          in: query
          description: Sender email address (must be from domain in API key scopes)
          schema:
            type: string
            format: email
        - name: recipient
          in: query
          description: Recipient email address
          schema:
            type: string
            format: email
        - name: subject
          in: query
          description: Filter by subject text
          schema:
            type: string
        - name: message_id_header
          in: query
          description: Filter by message ID header (same ID returned by CreateMessage API)
          schema:
            type: string
        - name: from_time
          in: query
          description: Filter messages created after this time (RFC3339 format)
          schema:
            type: string
            format: date-time
          example: "2023-12-25T10:30:00Z"
        - name: to_time
          in: query
          description: Filter messages created before this time (RFC3339 format)
          schema:
            type: string
            format: date-time
          example: "2023-12-26T10:30:00Z"
        - name: limit
          in: query
          description: Maximum number of items to return (1-100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
        - name: cursor
          in: query
          description: Pagination cursor for the next page
          schema:
            type: string
      security:
        - BearerAuth: ["messages:read:all", "messages:read:{domain}"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go"
              "github.com/AhaSend/ahasend-go/api"
              "github.com/AhaSend/ahasend-go/models/requests"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.MessagesAPI.GetMessages(
                ctx,
                accountID,
                requests.GetMessagesParams{
                  Status: ahasend.String("bounced,failed"),
                  Sender: ahasend.String("info@example.com"),
                },
              )
              if err != nil {
                log.Fatalf("Error getting messages: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Found %d messages\n", len(response.Data))
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }

      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMessagesResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create Message
      description: |
        Creates and sends a message to one or more recipients.

        **Validation Requirements:**
        - Either `text_content` or `html_content` is required
        - `from.email` must be from a domain you own with valid DNS records
        - `retention.metadata` must be between 1 and 30 days
        - `retention.data` must be between 0 and 30 days
        - If `reply_to` is provided, do not include `reply-to` in headers
        - `message-id` header will be ignored and automatically generated
        - Schedule times must be in RFC3339 format
      operationId: createMessage
      tags:
        - Messages
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/IdempotencyKey'
      security:
        - BearerAuth: ["messages:send:all", "messages:send:{domain}"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go"
              "github.com/AhaSend/ahasend-go/api"
              "github.com/AhaSend/ahasend-go/models/common"
              "github.com/AhaSend/ahasend-go/models/requests"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              response, httpResp, err := client.MessagesAPI.CreateMessage(
                ctx,
                accountID,
                requests.CreateMessageRequest{
                  From: common.SenderAddress{
                    Email: "info@example.com",
                    Name:  ahasend.String("Example Corp."),
                  },
                  Recipients: []common.Recipient{
                    {
                      Email: "john@example.com",
                      Name:  ahasend.String("John Smith"),
                    },
                  },
                  Subject:     "Hello",
                  TextContent: ahasend.String("Hello world!"),
                  Sandbox:     ahasend.Bool(true),
                },
              )
              if err != nil {
                log.Fatalf("Error sending message: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Send successful! Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Message ID: %s\n", *response.Data[0].ID)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }


      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageRequest'
      responses:
        '202':
          description: Message created successfully
          headers:
            Idempotent-Replayed:
              $ref: '#/components/headers/IdempotentReplayed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMessageResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          $ref: '#/components/responses/IdempotencyConflict'
        '412':
          $ref: '#/components/responses/IdempotencyPreconditionFailed'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v2/accounts/{account_id}/messages/{message_id}:
    get:
      summary: Get Message
      description: |
        Returns the complete message by its ID, including raw content and parsed content structure.
      operationId: getMessage
      tags:
        - Messages
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: message_id
          in: path
          required: true
          description: Message API ID (the same ID returned by [Create Message API](/api-reference/messages/create-message))
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: ["messages:read:all", "messages:read:{domain}"]
      responses:
        '200':
          description: Message details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v2/accounts/{account_id}/messages/{message_id}/cancel:
    delete:
      summary: Cancel Message
      description: Cancels a scheduled message
      operationId: cancelMessage
      tags:
        - Messages
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: message_id
          in: path
          required: true
          description: Message API ID (the same ID returned by [Create Message API](/api-reference/messages/create-message))
          schema:
            type: string
      security:
        - BearerAuth: ["messages:cancel:all", "messages:cancel:{domain}"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go/api"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              response, httpResp, err := client.MessagesAPI.CancelMessage(
                ctx,
                accountID,
                "<uuid@example.com>",
              )
              if err != nil {
                log.Fatalf("Error canceling message: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Successfully canceled! Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Message canceled: %s\n", response.Message)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }

      responses:
        '200':
          description: Scheduled message is cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Account endpoints
  /v2/accounts/{account_id}:
    get:
      summary: Get Account
      description: Returns account information
      operationId: getAccount
      tags:
        - Accounts
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: ["accounts:read"]
      responses:
        '200':
          description: Account details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update Account
      description: |
        Updates account settings

        **Validation Requirements:**
        - `name` must be maximum 255 characters
        - `website` must be a valid URL
        - `message_metadata_retention` must be between 1 and 30 days
        - `message_data_retention` must be between 0 and 30 days
      operationId: updateAccount
      tags:
        - Accounts
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: ["accounts:write"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountRequest'
      responses:
        '200':
          description: Account updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v2/accounts/{account_id}/members:
    get:
      summary: Get Account Members
      description: Returns a list of account members
      operationId: getAccountMembers
      tags:
        - Accounts
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: ["accounts:members:read"]
      responses:
        '200':
          description: List of account members
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountMembersResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Add Account Member
      description: |
        Adds a new member to the account

        **Validation Requirements:**
        - `email` must be a valid email address
        - `role` must be one of: Administrator, Developer, Analyst, Billing Manager
      operationId: addAccountMember
      tags:
        - Accounts
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/IdempotencyKey'
      security:
        - BearerAuth: ["accounts:members:add"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMemberRequest'
      responses:
        '200':
          description: Member added successfully
          headers:
            Idempotent-Replayed:
              $ref: '#/components/headers/IdempotentReplayed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccount'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          $ref: '#/components/responses/IdempotencyConflict'
        '412':
          $ref: '#/components/responses/IdempotencyPreconditionFailed'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v2/accounts/{account_id}/members/{user_id}:
    delete:
      summary: Remove Account Member
      description: |
        Removes a member from the account

        **Restrictions:**
        - You cannot delete yourself
        - You cannot delete the account owner
      operationId: removeAccountMember
      tags:
        - Accounts
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: user_id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: ["accounts:members:remove"]
      responses:
        '200':
          description: Member removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Member not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Suppressions endpoints
  /v2/accounts/{account_id}/suppressions:
    get:
      summary: Get Suppressions
      description: |
        Returns a list of suppressions for the account

        **Query Parameters:**
        - `domain`: Filter by domain (optional)
        - `email`: Filter by email (optional)
        - `from_date`: Filter suppressions created after this date (RFC3339 format)
        - `to_date`: Filter suppressions created before this date (RFC3339 format)
        - `limit`: Maximum number of items to return (1-100, default: 100)
        - `cursor`: Pagination cursor for the next page
      operationId: getSuppressions
      tags:
        - Suppressions
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: domain
          in: query
          description: Filter by domain
          schema:
            type: string
        - name: email
          in: query
          required: true
          description: Email address
          schema:
            type: string
            format: email
        - name: from_date
          in: query
          description: Filter suppressions created after this date (RFC3339 format)
          schema:
            type: string
            format: date-time
        - name: to_date
          in: query
          description: Filter suppressions created before this date (RFC3339 format)
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          description: Maximum number of items to return (1-100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
        - name: cursor
          in: query
          description: Pagination cursor for the next page
          schema:
            type: string
      security:
        - BearerAuth: ["suppressions:read"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go/api"
              "github.com/AhaSend/ahasend-go/models/requests"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.SuppressionsAPI.GetSuppressions(
                ctx,
                accountID,
                requests.GetSuppressionsParams{},
                nil,
              )
              if err != nil {
                log.Fatalf("Error getting suppressions: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Found %d suppressions\n", len(response.Data))
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }

      responses:
        '200':
          description: List of suppressions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSuppressionsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create Suppression
      description: |
        Creates a new suppression for an email address

        **Validation Requirements:**
        - `email` must be a valid email address
        - `expires_at` must be in RFC3339 format
        - `domain` is optional - if not provided, applies to all account domains
      operationId: createSuppression
      tags:
        - Suppressions
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/IdempotencyKey'
      security:
        - BearerAuth: ["suppressions:write"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"
              "time"

              "github.com/AhaSend/ahasend-go"
              "github.com/AhaSend/ahasend-go/api"
              "github.com/AhaSend/ahasend-go/models/requests"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.SuppressionsAPI.CreateSuppression(
                ctx,
                accountID,
                requests.CreateSuppressionRequest{
                  Email:     "test@example.com",
                  Reason:    ahasend.String("Inbox full"),
                  ExpiresAt: time.Now().Add(time.Hour * 24 * 30),
                },
              )
              if err != nil {
                log.Fatalf("Error creating suppression: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Created suppression: %#v\n", response)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSuppressionRequest'
      responses:
        '201':
          description: Suppression created successfully
          headers:
            Idempotent-Replayed:
              $ref: '#/components/headers/IdempotentReplayed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSuppressionResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          $ref: '#/components/responses/IdempotencyConflict'
        '412':
          $ref: '#/components/responses/IdempotencyPreconditionFailed'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete Suppression
      description: |
        Deletes suppressions for an email address

        **Query Parameters:**
        - `email`: Required email address to delete from suppression list
        - `domain`: Optional domain filter to delete suppressions for specific domain only
      operationId: deleteSuppression
      tags:
        - Suppressions
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: email
          in: query
          required: true
          description: Email address
          schema:
            type: string
            format: email
        - name: domain
          in: query
          description: Optional domain filter
          schema:
            type: string
      security:
        - BearerAuth: ["suppressions:delete"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go"
              "github.com/AhaSend/ahasend-go/api"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.SuppressionsAPI.DeleteSuppression(
                ctx,
                accountID,
                "info@bigco.com",
                ahasend.String("notifications.example.com"),
              )
              if err != nil {
                log.Fatalf("Error deleting suppression: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Deleted the suppression, response: %s\n", len(response.Message))
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }

      responses:
        '200':
          description: Suppression deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v2/accounts/{account_id}/suppressions/all:
    delete:
      summary: Delete All Suppressions
      description: |
        Deletes all suppressions for the account

        **Query Parameters:**
        - `domain`: Optional domain filter to delete suppressions for specific domain only
      operationId: deleteAllSuppressions
      tags:
        - Suppressions
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: domain
          in: query
          description: Optional domain filter
          schema:
            type: string
      security:
        - BearerAuth: ["suppressions:wipe"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go/api"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.SuppressionsAPI.DeleteAllSuppressions(
                ctx,
                accountID,
                nil,
              )
              if err != nil {
                log.Fatalf("Error deleting all suppressions: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Deleted all suppressions: %#v\n", response)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }

      responses:
        '200':
          description: All suppressions deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Routes endpoints
  /v2/accounts/{account_id}/routes:
    get:
      summary: Get Routes
      description: Returns a list of routes for the account
      operationId: getRoutes
      tags:
        - Routes
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: Maximum number of items to return (1-100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
        - name: cursor
          in: query
          description: Pagination cursor for the next page
          schema:
            type: string
      security:
        - BearerAuth: ["routes:read:all", "routes:read:{domain}"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go/api"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.RoutesAPI.GetRoutes(
                ctx,
                accountID,
                nil,
                nil,
              )
              if err != nil {
                log.Fatalf("Error getting routes: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Found %d routes\n", len(response.Data))
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }

      responses:
        '200':
          description: List of routes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRoutesResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create Route
      description: Creates a new route for inbound email routing
      operationId: createRoute
      tags:
        - Routes
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/IdempotencyKey'
      security:
        - BearerAuth: ["routes:write:all", "routes:write:{domain}"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go/api"
              "github.com/AhaSend/ahasend-go/models/requests"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.RoutesAPI.CreateRoute(
                ctx,
                accountID,
                requests.CreateRouteRequest{
                  Name: "My Route",
                  URL:  "https://mystartup.com/tickets",
                  Recipient: "ticket-*@mystartup.com",
                  Enabled:   true,
                  Attachments: true,
                  Headers: true,
                  StripReplies: true,
                },
              )
              if err != nil {
                log.Fatalf("Error creating route: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Created route: %#v\n", response)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRouteRequest'
      responses:
        '201':
          description: Route created successfully
          headers:
            Idempotent-Replayed:
              $ref: '#/components/headers/IdempotentReplayed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          $ref: '#/components/responses/IdempotencyConflict'
        '412':
          $ref: '#/components/responses/IdempotencyPreconditionFailed'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v2/accounts/{account_id}/routes/{route_id}:
    get:
      summary: Get Route
      description: Returns a specific route by ID
      operationId: getRoute
      tags:
        - Routes
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: route_id
          in: path
          required: true
          description: Route ID
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: ["routes:read:all", "routes:read:{domain}"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go/api"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.RoutesAPI.GetRoute(
                ctx,
                accountID,
                uuid.MustParse("c5a32c40-b351-439f-8230-779daed3e42c"),
              )
              if err != nil {
                log.Fatalf("Error getting route: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Route: %#v\n", response)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }
      responses:
        '200':
          description: Route details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Route not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update Route
      description: Updates an existing route
      operationId: updateRoute
      tags:
        - Routes
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: route_id
          in: path
          required: true
          description: Route ID
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: ["routes:write:all", "routes:write:{domain}"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go"
              "github.com/AhaSend/ahasend-go/api"
              "github.com/AhaSend/ahasend-go/models/requests"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.RoutesAPI.UpdateRoute(
                ctx,
                accountID,
                uuid.MustParse("c5a32c40-b351-439f-8230-779daed3e42c"),
                requests.UpdateRouteRequest{
                  Name: ahasend.String("Updated Name"),
                  URL:  ahasend.String("https://mystartup.com/new-tickets"),
                },
              )
              if err != nil {
                log.Fatalf("Error updating route: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Updated route: %#v\n", response)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRouteRequest'
      responses:
        '200':
          description: Route updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Route not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete Route
      description: Deletes a route
      operationId: deleteRoute
      tags:
        - Routes
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: route_id
          in: path
          required: true
          description: Route ID
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: ["routes:delete:all", "routes:delete:{domain}"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go/api"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.RoutesAPI.DeleteRoute(
                ctx,
                accountID,
                uuid.MustParse("c5a32c40-b351-439f-8230-779daed3e42c"),
              )
              if err != nil {
                log.Fatalf("Error deleting route: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Deleted route: %#v\n", response)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }

      responses:
        '200':
          description: Route deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Route not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Webhooks endpoints
  /v2/accounts/{account_id}/webhooks:
    get:
      summary: Get Webhooks
      description: |
        Returns a list of webhooks for the account

        **Query Parameters:**
        - `enabled`: Filter by enabled status
        - Event filters: `on_reception`, `on_delivered`, `on_transient_error`, `on_failed`, `on_bounced`, `on_suppressed`, `on_opened`, `on_clicked`, `on_suppression_created`, `on_dns_error`
        - `limit`: Maximum number of items to return (1-100, default: 100)
        - `cursor`: Pagination cursor for the next page
      operationId: getWebhooks
      tags:
        - Webhooks
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: enabled
          in: query
          description: Filter by enabled status
          schema:
            type: boolean
        - name: on_reception
          in: query
          description: Filter by reception event trigger
          schema:
            type: boolean
        - name: on_delivered
          in: query
          description: Filter by delivery event trigger
          schema:
            type: boolean
        - name: on_transient_error
          in: query
          description: Filter by transient error event trigger
          schema:
            type: boolean
        - name: on_failed
          in: query
          description: Filter by failure event trigger
          schema:
            type: boolean
        - name: on_bounced
          in: query
          description: Filter by bounce event trigger
          schema:
            type: boolean
        - name: on_suppressed
          in: query
          description: Filter by suppression event trigger
          schema:
            type: boolean
        - name: on_opened
          in: query
          description: Filter by open event trigger
          schema:
            type: boolean
        - name: on_clicked
          in: query
          description: Filter by click event trigger
          schema:
            type: boolean
        - name: on_suppression_created
          in: query
          description: Filter by suppression creation event trigger
          schema:
            type: boolean
        - name: on_dns_error
          in: query
          description: Filter by DNS error event trigger
          schema:
            type: boolean
        - name: limit
          in: query
          description: Maximum number of items to return (1-100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
        - name: cursor
          in: query
          description: Pagination cursor for the next page
          schema:
            type: string
      security:
        - BearerAuth: ["webhooks:read:all", "webhooks:read:{domain}"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go"
              "github.com/AhaSend/ahasend-go/api"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.WebhooksAPI.GetWebhooks(
                ctx,
                accountID,
                api.GetWebhooksParams{
                  Limit: ahasend.Int32(100),
                },
                nil,
              )
              if err != nil {
                log.Fatalf("Error getting webhooks: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Found %d webhooks\n", len(response.Data))
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }
      responses:
        '200':
          description: List of webhooks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedWebhooksResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create Webhook
      description: Creates a new webhook for event notifications
      operationId: createWebhook
      tags:
        - Webhooks
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/IdempotencyKey'
      security:
        - BearerAuth: ["webhooks:write:all", "webhooks:write:{domain}"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go/api"
              "github.com/AhaSend/ahasend-go/models/requests"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.WebhooksAPI.CreateWebhook(
                ctx,
                accountID,
                requests.CreateWebhookRequest{
                  Name:   "Failures",
                  URL:    "https://mystartup.com/webhook",
                  Enabled: true,
                  OnBounced: true,
                  OnTransientError: true,
                  OnFailed: true,
                },
                nil,
              )
              if err != nil {
                log.Fatalf("Error creating webhook: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Created webhook: %#v\n", response)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebhookRequest'
      responses:
        '201':
          description: Webhook created successfully
          headers:
            Idempotent-Replayed:
              $ref: '#/components/headers/IdempotentReplayed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          $ref: '#/components/responses/IdempotencyConflict'
        '412':
          $ref: '#/components/responses/IdempotencyPreconditionFailed'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v2/accounts/{account_id}/webhooks/{webhook_id}:
    get:
      summary: Get Webhook
      description: Returns a specific webhook by ID
      operationId: getWebhook
      tags:
        - Webhooks
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: webhook_id
          in: path
          required: true
          description: Webhook ID
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: ["webhooks:read:all", "webhooks:read:{domain}"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go/api"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.WebhooksAPI.GetWebhook(
                ctx,
                accountID,
                uuid.MustParse("c5a32c40-b351-439f-8230-779daed3e42c"),
                nil,
              )
              if err != nil {
                log.Fatalf("Error getting webhook: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Webhook: %#v\n", response)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }
      responses:
        '200':
          description: Webhook details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Webhook not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update Webhook
      description: |
        Updates an existing webhook

        **Note:** The webhook secret is not updatable
      operationId: updateWebhook
      tags:
        - Webhooks
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: webhook_id
          in: path
          required: true
          description: Webhook ID
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: ["webhooks:write:all", "webhooks:write:{domain}"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go"
              "github.com/AhaSend/ahasend-go/api"
              "github.com/AhaSend/ahasend-go/models/requests"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.WebhooksAPI.UpdateWebhook(
                ctx,
                accountID,
                uuid.MustParse("c5a32c40-b351-439f-8230-779daed3e42c"),
                requests.UpdateWebhookRequest{
                  Name:      ahasend.String("Failures"),
                  URL:       ahasend.String("https://mystartup.com/webhook"),
                  Enabled:   ahasend.Bool(true),
                  OnBounced: ahasend.Bool(true),
                },
              )
              if err != nil {
                log.Fatalf("Error updating webhook: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Updated webhook: %#v\n", response)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWebhookRequest'
      responses:
        '200':
          description: Webhook updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Webhook not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete Webhook
      description: Deletes a webhook
      operationId: deleteWebhook
      tags:
        - Webhooks
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: webhook_id
          in: path
          required: true
          description: Webhook ID
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: ["webhooks:delete:all", "webhooks:delete:{domain}"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go/api"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.WebhooksAPI.DeleteWebhook(
                ctx,
                accountID,
                uuid.MustParse("c5a32c40-b351-439f-8230-779daed3e42c"),
              )
              if err != nil {
                log.Fatalf("Error deleting webhook: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Deleted webhook: %#v\n", response)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }
      responses:
        '200':
          description: Webhook deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Webhook not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # SMTP Credentials endpoints
  /v2/accounts/{account_id}/smtp-credentials:
    get:
      summary: Get SMTP Credentials
      description: Returns a list of SMTP credentials for the account
      operationId: getSMTPCredentials
      tags:
        - SMTP Credentials
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          description: Maximum number of items to return (1-100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 100
        - name: cursor
          in: query
          description: Pagination cursor for the next page
          schema:
            type: string
      security:
        - BearerAuth: ["smtp-credentials:read:all", "smtp-credentials:read:{domain}"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go/api"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.SMTPCredentialsAPI.GetSMTPCredentials(
                ctx,
                accountID,
                nil,
                nil,
              )
              if err != nil {
                log.Fatalf("Error getting SMTP credentials: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("SMTP credentials: %#v\n", response)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }
      responses:
        '200':
          description: List of SMTP credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSMTPCredentialsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create SMTP Credential
      description: Creates a new SMTP credential for SMTP authentication
      operationId: createSMTPCredential
      tags:
        - SMTP Credentials
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/IdempotencyKey'
      security:
        - BearerAuth: ["smtp-credentials:write:all", "smtp-credentials:write:{domain}"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go/api"
              "github.com/AhaSend/ahasend-go/models/requests"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.SMTPCredentialsAPI.CreateSMTPCredential(
                ctx,
                accountID,
                requests.CreateSMTPCredentialRequest{
                  Name: "My SMTP Credential",
                  Scope: "global",
                  Sandbox: true,
                },
              )
              if err != nil {
                log.Fatalf("Error creating SMTP credentials: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Created SMTP credentials: %#v\n", response)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSMTPCredentialRequest'
      responses:
        '201':
          description: SMTP credential created successfully
          headers:
            Idempotent-Replayed:
              $ref: '#/components/headers/IdempotentReplayed'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SMTPCredential'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          $ref: '#/components/responses/IdempotencyConflict'
        '412':
          $ref: '#/components/responses/IdempotencyPreconditionFailed'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v2/accounts/{account_id}/smtp-credentials/{smtp_credential_id}:
    get:
      summary: Get SMTP Credential
      description: Returns a specific SMTP credential by ID
      operationId: getSMTPCredential
      tags:
        - SMTP Credentials
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: smtp_credential_id
          in: path
          required: true
          description: SMTP Credential ID
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: ["smtp-credentials:read:all", "smtp-credentials:read:{domain}"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go/api"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.SMTPCredentialsAPI.GetSMTPCredential(
                ctx,
                accountID,
                123,
              )
              if err != nil {
                log.Fatalf("Error getting SMTP credentials: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("SMTP credentials: %#v\n", response)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }
      responses:
        '200':
          description: SMTP credential details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SMTPCredential'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: SMTP credential not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete SMTP Credential
      description: Deletes an SMTP credential
      operationId: deleteSMTPCredential
      tags:
        - SMTP Credentials
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: smtp_credential_id
          in: path
          required: true
          description: SMTP Credential ID
          schema:
            type: string
            format: uuid
      security:
        - BearerAuth: ["smtp-credentials:delete:all", "smtp-credentials:delete:{domain}"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"

              "github.com/AhaSend/ahasend-go/api"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              // Call the ping endpoint
              response, httpResp, err := client.SMTPCredentialsAPI.DeleteSMTPCredential(
                ctx,
                accountID,
                123,
              )
              if err != nil {
                log.Fatalf("Error deleting SMTP credentials: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Deleted SMTP credentials: %#v\n", response)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }
      responses:
        '200':
          description: SMTP credential deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: SMTP credential not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Statistics endpoints
  /v2/accounts/{account_id}/statistics/transactional/deliverability:
    get:
      summary: Get Deliverability Statistics
      description: |
        Returns transactional deliverability statistics grouped by status

        **Query Parameters:**
        - `from_time`: Filter statistics after this date (RFC3339 format)
        - `to_time`: Filter statistics before this date (RFC3339 format)
        - `sender_domain`: Filter by sender domain
        - `recipient_domains`: Filter by recipient domain
        - `tags`: Filter by tags (comma-separated)
        - `group_by`: Group by time period (hour, day, week, month)
      operationId: getDeliverabilityStatistics
      tags:
        - Statistics
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: from_time
          in: query
          description: Filter statistics after this datetime (RFC3339 format)
          schema:
            type: string
            format: date-time
        - name: to_time
          in: query
          description: Filter statistics before this datetime (RFC3339 format)
          schema:
            type: string
            format: date-time
        - name: sender_domain
          in: query
          description: Filter by sender domain
          schema:
            type: string
        - name: recipient_domains
          in: query
          description: Filter by a comma separated list of recipient domains
          schema:
            type: string
          example: gmail.com,googlemail.com
        - name: tags
          in: query
          description: Filter by tags (comma-separated)
          schema:
            type: string
        - name: group_by
          in: query
          description: Group by time period
          schema:
            type: string
            enum: [hour, day, week, month]
            default: day
      security:
        - BearerAuth: ["statistics-transactional:read:all", "statistics-transactional:read:{domain}"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"
              "time"

              "github.com/AhaSend/ahasend-go"
              "github.com/AhaSend/ahasend-go/api"
              "github.com/AhaSend/ahasend-go/models/requests"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              fromTime := time.Now().Add(-time.Hour * 24 * 30)
              // Call the ping endpoint
              response, httpResp, err := client.StatisticsAPI.GetDeliverabilityStatistics(
                ctx,
                accountID,
                requests.GetDeliverabilityStatisticsParams{
                  FromTime:         &fromTime,
                  SenderDomain:     ahasend.String("example.com"),
                  RecipientDomains: ahasend.String("gmail.com"),
                  GroupBy:          ahasend.String("week"),
                },
              )
              if err != nil {
                log.Fatalf("Error getting deliverability statistics: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Deliverability statistics: %#v\n", response)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }
      responses:
        '200':
          description: Deliverability statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliverabilityStatisticsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests (rate limited to 1 request per second)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v2/accounts/{account_id}/statistics/transactional/bounce:
    get:
      summary: Get Bounce Statistics
      description: |
        Returns transactional bounce statistics grouped by classification

        **Query Parameters:**
        - `from_time`: Filter statistics after this date (RFC3339 format)
        - `to_time`: Filter statistics before this date (RFC3339 format)
        - `sender_domain`: Filter by sender domain
        - `recipient_domains`: Filter by recipient domain
        - `tags`: Filter by tags (comma-separated)
        - `group_by`: Group by time period (hour, day, week, month)
      operationId: getBounceStatistics
      tags:
        - Statistics
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: from_time
          in: query
          description: Filter statistics after this datetime (RFC3339 format)
          schema:
            type: string
            format: date-time
        - name: to_time
          in: query
          description: Filter statistics before this datetime (RFC3339 format)
          schema:
            type: string
            format: date-time
        - name: sender_domain
          in: query
          description: Filter by sender domain
          schema:
            type: string
        - name: recipient_domains
          in: query
          description: Filter by a comma separated list of recipient domains
          schema:
            type: string
          example: gmail.com,googlemail.com
        - name: tags
          in: query
          description: Filter by tags (comma-separated)
          schema:
            type: string
        - name: group_by
          in: query
          description: Group by time period
          schema:
            type: string
            enum: [hour, day, week, month]
            default: day
      security:
        - BearerAuth: ["statistics-transactional:read:all", "statistics-transactional:read:{domain}"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"
              "time"

              "github.com/AhaSend/ahasend-go"
              "github.com/AhaSend/ahasend-go/api"
              "github.com/AhaSend/ahasend-go/models/requests"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              fromTime := time.Now().Add(-time.Hour * 24 * 30)
              // Call the ping endpoint
              response, httpResp, err := client.StatisticsAPI.GetBounceStatistics(
                ctx,
                accountID,
                requests.GetBounceStatisticsParams{
                  FromTime:         &fromTime,
                  SenderDomain:     ahasend.String("example.com"),
                  RecipientDomains: ahasend.String("gmail.com"),
                  GroupBy:          ahasend.String("week"),
                },
              )
              if err != nil {
                log.Fatalf("Error getting bounce statistics: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Bounce statistics: %#v\n", response)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }
      responses:
        '200':
          description: Bounce statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BounceStatisticsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests (rate limited to 1 request per second)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /v2/accounts/{account_id}/statistics/transactional/delivery-time:
    get:
      summary: Get Delivery Time Statistics
      description: |
        Returns transactional delivery time statistics grouped by recipient domain

        **Query Parameters:**
        - `from_time`: Filter statistics after this date (RFC3339 format)
        - `to_time`: Filter statistics before this date (RFC3339 format)
        - `sender_domain`: Filter by sender domain
        - `recipient_domains`: Filter by recipient domains
        - `tags`: Filter by tags (comma-separated)
        - `group_by`: Group by time period (hour, day, week, month)
      operationId: getDeliveryTimeStatistics
      tags:
        - Statistics
      parameters:
        - name: account_id
          in: path
          required: true
          description: Account ID
          schema:
            type: string
            format: uuid
        - name: from_time
          in: query
          description: Filter statistics after this datetime (RFC3339 format)
          schema:
            type: string
            format: date-time
        - name: to_time
          in: query
          description: Filter statistics before this datetime (RFC3339 format)
          schema:
            type: string
            format: date-time
        - name: sender_domain
          in: query
          description: Filter by sender domain
          schema:
            type: string
        - name: recipient_domains
          in: query
          description: Filter by a comma separated list of recipient domains
          schema:
            type: string
          example: gmail.com,googlemail.com
        - name: tags
          in: query
          description: Filter by tags (comma-separated)
          schema:
            type: string
        - name: group_by
          in: query
          description: Group by time period
          schema:
            type: string
            enum: [hour, day, week, month]
            default: day
      security:
        - BearerAuth: ["statistics-transactional:read:all", "statistics-transactional:read:{domain}"]
      x-code-samples:
        - lang: go
          label: AhaSend Go SDK
          source: |
            package main

            import (
              "context"
              "fmt"
              "log"
              "time"

              "github.com/AhaSend/ahasend-go"
              "github.com/AhaSend/ahasend-go/api"
              "github.com/AhaSend/ahasend-go/models/requests"
              "github.com/google/uuid"
            )

            func main() {
              // Create API client with authentication
              client := api.NewAPIClient(
                api.WithAPIKey("aha-sk-your-64-character-key"),
              )

              accountID := uuid.New()

              // Create context for the API call
              ctx := context.Background()

              fromTime := time.Now().Add(-time.Hour * 24 * 30)
              // Call the ping endpoint
              response, httpResp, err := client.StatisticsAPI.GetDeliveryTimeStatistics(
                ctx,
                accountID,
                requests.GetDeliveryTimeStatisticsParams{
                  FromTime:         &fromTime,
                  SenderDomain:     ahasend.String("example.com"),
                  RecipientDomains: ahasend.String("gmail.com"),
                  GroupBy:          ahasend.String("week"),
                },
              )
              if err != nil {
                log.Fatalf("Error getting delivery time statistics: %v", err)
              }

              // Check response
              if httpResp.StatusCode == 200 {
                fmt.Printf("✅ Status: %d\n", httpResp.StatusCode)
                if response != nil {
                  fmt.Printf("Delivery time statistics: %#v\n", response)
                }
              } else {
                fmt.Printf("❌ Unexpected status code: %d\n", httpResp.StatusCode)
              }
            }
      responses:
        '200':
          description: Delivery time statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryTimeStatisticsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too many requests (rate limited to 1 request per second)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

tags:
  - name: Utility
    description: Utility endpoints for health checks and diagnostics
  - name: API Keys
    description: Manage API keys for authentication and access control
  - name: Domains
    description: Manage sending domains
  - name: Messages
    description: Send and manage transactional messages
  - name: Accounts
    description: Manage account settings and members
  - name: Suppressions
    description: Manage email suppressions
  - name: Routes
    description: Manage inbound email routing
  - name: Webhooks
    description: Manage webhook notifications
  - name: SMTP Credentials
    description: Manage SMTP authentication credentials
  - name: Statistics
    description: Access transactional email statistics
  - name: Message Events
    description: Webhooks for outbound message delivery events
  - name: Suppression Events
    description: Webhooks for suppression list changes
  - name: Domain Events
    description: Webhooks for domain configuration issues
  - name: Route Events
    description: Webhooks for inbound email routing
